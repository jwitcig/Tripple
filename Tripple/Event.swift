//
//  Event.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.2
//

import CoreLocation
import Foundation
import UIKit

import AWSDynamoDB
import GeohashKitiOS
import RealmSwift

enum EventType: String {
    case Pickup, Drop
}

protocol Event {
    var userId: String { get set }
    var id: String { get }
    var latitude: CLLocationDegrees { get set }
    var longitude: CLLocationDegrees { get set }
    var location: CLLocation { get set }
    var pinId: String { get set }
    var previousEventId: String? { get set }
    var geohash: String { get set }
    
    var type: String { get set }
    
    var createdDate: Date { get set }
}

protocol LocalEventModel: Event {
    var _userId: String { get set }
    var _latitude: Double { get set }
    var _longitude: Double { get set }
    var _pinId: String { get set }
    var _previousEventId: String? { get set }
    var _timestamp: Int { get set }
    var _type: String { get set }
    var _geohash: String { get set }
}

protocol CloudEventModel: Event {
    var _userId: String? { get set }
    var _latitude: NSNumber? { get set }
    var _longitude: NSNumber? { get set }
    var _pinId: String? { get set }
    var _previousEventId: String? { get set }
    var _timestamp: NSNumber? { get set }
    var _type: String? { get set }
    var _geohash: String? { get set }
}

extension Event {
    init() {
        self.init()
    }
    
    var id: String {
        get { return "[\(userId)]\(Int(createdDate.timeIntervalSince1970))" }
    }
    
    var location: CLLocation {
        get { return CLLocation(latitude: latitude, longitude: longitude) }
        set {
            latitude = newValue.coordinate.latitude
            longitude = newValue.coordinate.longitude
            geohash = Geohash.encode(location: newValue, 12)
        }
    }
}

extension LocalEventModel {
    var userId: String {
        get { return _userId ?? "" }
        set { _userId = newValue }
    }
<<<<<<< HEAD:Tripple/Event.swift
=======
    var id: String {
        get { return _id ?? UUID().uuidString }
        set { _id = newValue }
    }
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8:Tripple/Waypoint.swift
    var latitude: CLLocationDegrees {
        get { return _latitude }
        set { _latitude = newValue }
    }
    var longitude: CLLocationDegrees {
        get { return _longitude }
        set { _longitude = newValue }
    }
    var pinId: String {
        get { return _pinId ?? "" }
        set { _pinId = newValue }
    }
    var previousEventId: String? {
        get { return _previousEventId }
        set { _previousEventId = newValue }
    }
    var type: String {
        get { return _type  }
        set { _type = newValue }
    }
    var geohash: String {
        get { return _geohash }
        set { _geohash = newValue }
    }
    var createdDate: Date {
        get {
            return Date(timeIntervalSince1970: Double(_timestamp))
        }
        set {
            _timestamp = Int(newValue.timeIntervalSince1970)
        }
    }
}

extension CloudEventModel {
    var userId: String {
        get { return _userId ?? "" }
        set { _userId = newValue }
    }
<<<<<<< HEAD:Tripple/Event.swift
=======
    var id: String {
        get { return _id ?? UUID().uuidString }
        set { _id = newValue }
    }
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8:Tripple/Waypoint.swift
    var latitude: CLLocationDegrees {
        get { return _latitude?.doubleValue ?? 0.0 }
        set { _latitude = newValue as NSNumber? }
    }
    var longitude: CLLocationDegrees {
        get { return _longitude?.doubleValue ?? 0.0 }
        set { _longitude = newValue as NSNumber? }
    }
    var pinId: String {
        get { return _pinId ?? "" }
        set { _pinId = newValue }
    }
    var previousEventId: String? {
        get { return _previousEventId }
        set { _previousEventId = newValue }
    }
    var type: String {
        get { return _type ?? "" }
        set { _type = newValue }
    }
    var geohash: String {
        get { return _geohash ?? "" }
        set { _geohash = newValue }
    }
    var createdDate: Date {
        get {
            if let interval = _timestamp {
                return Date(timeIntervalSince1970: interval.doubleValue)
            }
            return Date()
        }
        set {
            _timestamp = NSNumber(value: newValue.timeIntervalSince1970 as Double)
        }
    }
}

<<<<<<< HEAD:Tripple/Event.swift
class LocalEvent: Object, LocalEventModel {
    dynamic var _id = ""
    dynamic var _userId = "" {
        didSet { updateId() }
    }
    dynamic var _timestamp = 0 {
        didSet { updateId() }
    }
=======
class LocalWaypoint: Object, LocalWaypointModel {
    dynamic var _userId = ""
    dynamic var _id = UUID().uuidString
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8:Tripple/Waypoint.swift
    dynamic var _latitude: Double = 0.0
    dynamic var _longitude: Double = 0.0
    dynamic var _pinId = ""
    dynamic var _previousEventId: String?
    dynamic var _type = ""
    dynamic var _geohash = ""
    
    func updateId() {
        _id = id
    }
    
    override static func primaryKey() -> String? {
        return "_id"
    }
    
    override static func ignoredProperties() -> [String] {
        return ["userId", "latitude", "longitude", "pinId", "previousEventId", "timestamp", "type"]
    }
}

class CloudEvent: AWSDynamoDBObjectModel, AWSDynamoDBModeling, CloudEventModel {
    var _userId: String?
<<<<<<< HEAD:Tripple/Event.swift
=======
    var _id: String? = UUID().uuidString
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8:Tripple/Waypoint.swift
    var _latitude: NSNumber?
    var _longitude: NSNumber?
    var _pinId: String?
    var _previousEventId: String?
    var _timestamp: NSNumber? {
        didSet { _timestamp = NSNumber(integer: _timestamp!.integerValue) }
    }
    var _type: String?
    var _geohash: String?
    
    class func dynamoDBTableName() -> String {
        return "tripple-mobilehub-1169331636-Event"
    }
    
    class func hashKeyAttribute() -> String {
        return "_userId"
    }
    
    static func rangeKeyAttribute() -> String {
        return "_timestamp"
    }
    
    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
        return [
               "_userId" : "userId",
               "_latitude" : "latitude",
               "_longitude" : "longitude",
               "_pinId" : "pinId",
               "_previousEventId" : "previousEventId",
               "_timestamp" : "timestamp",
               "_type": "type",
               "_geohash": "geohash",
        ]
    }
    
    static func ignoreAttributes() -> [String] {
        return ["location", "createdDate", "id"]
    }
    
    // additions
<<<<<<< HEAD:Tripple/Event.swift
=======

    var dropLocation: CLLocation {
        get {
            return CLLocation(latitude: latitude, longitude: longitude)
        }
        set {
            _latitude = NSNumber(value: newValue.coordinate.latitude as Double)
            _longitude =  NSNumber(value: newValue.coordinate.longitude as Double)
        }
    }
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8:Tripple/Waypoint.swift
    
    override init() {
        super.init()
    }
    
    override init(dictionary dictionaryValue: [AnyHashable: Any]!, error: ()) throws {
        try super.init(dictionary: dictionaryValue, error: error)
    }
    
    required init!(coder: NSCoder!) {
        fatalError("init(coder:) has not been implemented")
    }
    
}
