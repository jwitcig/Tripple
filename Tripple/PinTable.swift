//
//  CloudPinTable.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.2
//

import Foundation
import UIKit
import AWSDynamoDB
import AWSMobileHubHelper

class CloudPinTable: NSObject, Table {
    
    var tableName: String
    var partitionKeyName: String
    var partitionKeyType: String
    var sortKeyName: String?
    var sortKeyType: String?
    var model: AWSDynamoDBObjectModel
    var indexes: [Index]
    var orderedAttributeKeys: [String] {
        return produceOrderedAttributeKeys(model)
    }
    var tableDisplayName: String {

        return "CloudPin"
    }
    
    override init() {

        model = CloudPin()
        
        tableName = model.classForCoder.dynamoDBTableName()
        partitionKeyName = model.classForCoder.hashKeyAttribute()
        partitionKeyType = "String"
        indexes = [

            CloudPinPrimaryIndex(),

            CloudPinStatusGeohashIndex(),
        ]
        if (model.classForCoder.responds(to: #selector(AWSDynamoDBModeling.rangeKeyAttribute))) {
            sortKeyName = model.classForCoder.rangeKeyAttribute!()
            sortKeyType = "Number"
        }
        super.init()
    }
    
    /**
     * Converts the attribute name from data object format to table format.
     *
     * - parameter dataObjectAttributeName: data object attribute name
     * - returns: table attribute name
     */

    func tableAttributeName(_ dataObjectAttributeName: String) -> String {
        return CloudPin.jsonKeyPathsByPropertyKey()[dataObjectAttributeName] as! String
    }
    
    func getItemDescription() -> String {
<<<<<<< HEAD
        return "Find Item with userId = \(AWSIdentityManager.defaultIdentityManager().identityId!) and timestamp = \(1111500000)."
    }
    
    func getItemWithCompletionHandler(completionHandler: (response: AWSDynamoDBObjectModel?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        objectMapper.load(CloudPin.self, hashKey: AWSIdentityManager.defaultIdentityManager().identityId!, rangeKey: 1111500000, completionHandler: {(response: AWSDynamoDBObjectModel?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
=======
        return "Find Item with userId = \(AWSIdentityManager.default().identityId!) and id = \("demo-id-500000")."
    }
    
    func getItemWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBObjectModel?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        objectMapper.load(CloudPin.self, hashKey: AWSIdentityManager.default().identityId!, rangeKey: "demo-id-500000", completionHandler: {(response: AWSDynamoDBObjectModel?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
            })
        })
    }
    
    func scanDescription() -> String {
        return "Show all items in the table."
    }
    
    func scanWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let scanExpression = AWSDynamoDBScanExpression()
        scanExpression.limit = 5

        objectMapper.scan(CloudPin.self, expression: scanExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func scanWithFilterDescription() -> String {
        return "Find all items with geohash < \("demo-geohash-500000")."
    }
    
    func scanWithFilterWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let scanExpression = AWSDynamoDBScanExpression()
        
        scanExpression.filterExpression = "#geohash < :geohash"
        scanExpression.expressionAttributeNames = ["#geohash": "geohash" ,]
        scanExpression.expressionAttributeValues = [":geohash": "demo-geohash-500000" ,]

        objectMapper.scan(CloudPin.self, expression: scanExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func insertSampleDataWithCompletionHandler(_ completionHandler: @escaping (_ errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        var errors: [NSError] = []
        let group: DispatchGroup = DispatchGroup()
        let numberOfObjects = 20
        

        let itemForGet = CloudPin()
        
<<<<<<< HEAD
        itemForGet._userId = AWSIdentityManager.defaultIdentityManager().identityId!
        itemForGet._timestamp = 1111500000
        itemForGet._currentEvent = NoSQLSampleDataGenerator.randomSampleMap()
        itemForGet._geohash = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("geohash")
=======
        itemForGet._userId = AWSIdentityManager.default().identityId!
        itemForGet._id = "demo-id-500000"
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
        itemForGet._message = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("message")
        itemForGet._pinStatus = NoSQLSampleDataGenerator.randomPartitionSampleStringWithAttributeName("pinStatus")
        itemForGet._title = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("title")
        
        
        group.enter()
        

        objectMapper.save(itemForGet, completionHandler: {(error: NSError?) -> Void in
            if error != nil {
                DispatchQueue.main.async(execute: {
                    errors.append(error!)
                })
            }
            group.leave()
        })
        
        for _ in 1..<numberOfObjects {

            let item: CloudPin = CloudPin()
<<<<<<< HEAD
            item._userId = AWSIdentityManager.defaultIdentityManager().identityId!
            item._timestamp = NoSQLSampleDataGenerator.randomSampleNumber()
            item._currentEvent = NoSQLSampleDataGenerator.randomSampleMap()
            item._geohash = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("geohash")
=======
            item._userId = AWSIdentityManager.default().identityId!
            item._id = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("id")
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
            item._message = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("message")
            item._pinStatus = NoSQLSampleDataGenerator.randomPartitionSampleStringWithAttributeName("pinStatus")
            item._title = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("title")
            
            group.enter()
            
            objectMapper.save(item, completionHandler: {(error: NSError?) -> Void in
                if error != nil {
                    DispatchQueue.main.async(execute: {
                        errors.append(error!)
                    })
                }
                group.leave()
            })
        }
        
        group.notify(queue: DispatchQueue.main, execute: {
            if errors.count > 0 {
                completionHandler(errors)
            }
            else {
                completionHandler(nil)
            }
        })
    }
    
    func removeSampleDataWithCompletionHandler(_ completionHandler: @escaping (_ errors: [NSError]?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        queryExpression.keyConditionExpression = "#userId = :userId"
        queryExpression.expressionAttributeNames = ["#userId": "userId"]
        queryExpression.expressionAttributeValues = [":userId": AWSIdentityManager.default().identityId!,]

        objectMapper.query(CloudPin.self, expression: queryExpression) { (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            if let error = error {
                DispatchQueue.main.async(execute: {
                    completionHandler(errors: [error]);
                    })
            } else {
                var errors: [NSError] = []
                let group: DispatchGroup = DispatchGroup()
                for item in response!.items {
                    group.enter()
                    objectMapper.remove(item, completionHandler: {(error: NSError?) -> Void in
                        if error != nil {
                            DispatchQueue.main.async(execute: {
                                errors.append(error!)
                            })
                        }
                        group.leave()
                    })
                }
                group.notify(queue: DispatchQueue.main, execute: {
                    if errors.count > 0 {
                        completionHandler(errors: errors)
                    }
                    else {
                        completionHandler(errors: nil)
                    }
                })
            }
        }
    }
    
    func updateItem(_ item: AWSDynamoDBObjectModel, completionHandler: @escaping (_ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        

        let itemToUpdate: CloudPin = item as! CloudPin
        
        itemToUpdate._currentEvent = NoSQLSampleDataGenerator.randomSampleMap()
        itemToUpdate._geohash = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("geohash")
        itemToUpdate._message = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("message")
        itemToUpdate._pinStatus = NoSQLSampleDataGenerator.randomPartitionSampleStringWithAttributeName("pinStatus")
        itemToUpdate._title = NoSQLSampleDataGenerator.randomSampleStringWithAttributeName("title")
        
        objectMapper.save(itemToUpdate, completionHandler: {(error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(error)
            })
        })
    }
    
    func removeItem(_ item: AWSDynamoDBObjectModel, completionHandler: @escaping (_ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        
        objectMapper.remove(item, completionHandler: {(error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(error)
            })
        })
    }
}

class CloudPinPrimaryIndex: NSObject, Index {
    
    var indexName: String? {
        return nil
    }
    
    func supportedOperations() -> [String] {
        return [
            QueryWithPartitionKey,
            QueryWithPartitionKeyAndFilter,
            QueryWithPartitionKeyAndSortKey,
            QueryWithPartitionKeyAndSortKeyAndFilter,
        ]
    }
    
    func queryWithPartitionKeyDescription() -> String {
        return "Find all items with userId = \(AWSIdentityManager.default().identityId!)."
    }
    
    func queryWithPartitionKeyWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        queryExpression.keyConditionExpression = "#userId = :userId"
        queryExpression.expressionAttributeNames = ["#userId": "userId",]
        queryExpression.expressionAttributeValues = [":userId": AWSIdentityManager.default().identityId!,]

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func queryWithPartitionKeyAndFilterDescription() -> String {
<<<<<<< HEAD
        return "Find all items with userId = \(AWSIdentityManager.defaultIdentityManager().identityId!) and geohash > \("demo-geohash-500000")."
=======
        return "Find all items with userId = \(AWSIdentityManager.default().identityId!) and message > \("demo-message-500000")."
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
    }
    
    func queryWithPartitionKeyAndFilterWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        queryExpression.keyConditionExpression = "#userId = :userId"
        queryExpression.filterExpression = "#geohash > :geohash"
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
            "#geohash": "geohash",
        ]
        queryExpression.expressionAttributeValues = [
<<<<<<< HEAD
            ":userId": AWSIdentityManager.defaultIdentityManager().identityId!,
            ":geohash": "demo-geohash-500000",
=======
            ":userId": AWSIdentityManager.default().identityId!,
            ":message": "demo-message-500000",
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
        ]
        

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func queryWithPartitionKeyAndSortKeyDescription() -> String {
<<<<<<< HEAD
        return "Find all items with userId = \(AWSIdentityManager.defaultIdentityManager().identityId!) and timestamp < \(1111500000)."
=======
        return "Find all items with userId = \(AWSIdentityManager.default().identityId!) and id < \("demo-id-500000")."
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
    }
    
    func queryWithPartitionKeyAndSortKeyWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        queryExpression.keyConditionExpression = "#userId = :userId AND #timestamp < :timestamp"
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
            "#timestamp": "timestamp",
        ]
        queryExpression.expressionAttributeValues = [
<<<<<<< HEAD
            ":userId": AWSIdentityManager.defaultIdentityManager().identityId!,
            ":timestamp": 1111500000,
=======
            ":userId": AWSIdentityManager.default().identityId!,
            ":id": "demo-id-500000",
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
        ]
        

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func queryWithPartitionKeyAndSortKeyAndFilterDescription() -> String {
<<<<<<< HEAD
        return "Find all items with userId = \(AWSIdentityManager.defaultIdentityManager().identityId!), timestamp < \(1111500000), and geohash > \("demo-geohash-500000")."
=======
        return "Find all items with userId = \(AWSIdentityManager.default().identityId!), id < \("demo-id-500000"), and message > \("demo-message-500000")."
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
    }
    
    func queryWithPartitionKeyAndSortKeyAndFilterWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        
        queryExpression.keyConditionExpression = "#userId = :userId AND #timestamp < :timestamp"
        queryExpression.filterExpression = "#geohash > :geohash"
        queryExpression.expressionAttributeNames = [
            "#userId": "userId",
            "#timestamp": "timestamp",
            "#geohash": "geohash",
        ]
        queryExpression.expressionAttributeValues = [
<<<<<<< HEAD
            ":userId": AWSIdentityManager.defaultIdentityManager().identityId!,
            ":timestamp": 1111500000,
            ":geohash": "demo-geohash-500000",
=======
            ":userId": AWSIdentityManager.default().identityId!,
            ":id": "demo-id-500000",
            ":message": "demo-message-500000",
>>>>>>> c1895d8be9fb31bb84b5a483d597d33bf21018f8
        ]
        

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
}

class CloudPinStatusGeohashIndex: NSObject, Index {
    
    var indexName: String? {

        return "Status-Geohash-Index"
    }
    
    func supportedOperations() -> [String] {
        return [
            QueryWithPartitionKey,
            QueryWithPartitionKeyAndFilter,
            QueryWithPartitionKeyAndSortKey,
            QueryWithPartitionKeyAndSortKeyAndFilter,
        ]
    }
    
    func queryWithPartitionKeyDescription() -> String {
        return "Find all items with CloudPinStatus = \("demo-CloudPinStatus-3")."
    }
    
    func queryWithPartitionKeyWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        

        queryExpression.indexName = "Status-Geohash-Index"
        queryExpression.keyConditionExpression = "#CloudPinStatus = :CloudPinStatus"
        queryExpression.expressionAttributeNames = ["#CloudPinStatus": "CloudPinStatus",]
        queryExpression.expressionAttributeValues = [":CloudPinStatus": "demo-CloudPinStatus-3",]

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func queryWithPartitionKeyAndFilterDescription() -> String {
        return "Find all items with CloudPinStatus = \("demo-CloudPinStatus-3") and timestamp > \(1111500000)."
    }
    
    func queryWithPartitionKeyAndFilterWithCompletionHandler(_ completionHandler: @escaping (_ response: AWSDynamoDBPaginatedOutput?, _ error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.default()
        let queryExpression = AWSDynamoDBQueryExpression()
        

        queryExpression.indexName = "Status-Geohash-Index"
        queryExpression.keyConditionExpression = "#CloudPinStatus = :CloudPinStatus"
        queryExpression.filterExpression = "#timestamp > :timestamp"
        queryExpression.expressionAttributeNames = [
            "#CloudPinStatus": "CloudPinStatus",
            "#timestamp": "timestamp",
        ]
        queryExpression.expressionAttributeValues = [
            ":CloudPinStatus": "demo-CloudPinStatus-3",
            ":timestamp": 1111500000,
        ]
        

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            DispatchQueue.main.async(execute: {
                completionHandler(response, error)
            })
        })
    }
    
    func queryWithPartitionKeyAndSortKeyDescription() -> String {
        return "Find all items with CloudPinStatus = \("demo-CloudPinStatus-3") and geohash < \("demo-geohash-500000")."
    }
    
    func queryWithPartitionKeyAndSortKeyWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        

        queryExpression.indexName = "Status-Geohash-Index"
        queryExpression.keyConditionExpression = "#CloudPinStatus = :CloudPinStatus AND #geohash < :geohash"
        queryExpression.expressionAttributeNames = [
            "#CloudPinStatus": "CloudPinStatus",
            "#geohash": "geohash",
        ]
        queryExpression.expressionAttributeValues = [
            ":CloudPinStatus": "demo-CloudPinStatus-3",
            ":geohash": "demo-geohash-500000",
        ]
        

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
    
    func queryWithPartitionKeyAndSortKeyAndFilterDescription() -> String {
        return "Find all items with CloudPinStatus = \("demo-CloudPinStatus-3"), geohash < \("demo-geohash-500000"), and timestamp > \(1111500000)."
    }
    
    func queryWithPartitionKeyAndSortKeyAndFilterWithCompletionHandler(completionHandler: (response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void) {
        let objectMapper = AWSDynamoDBObjectMapper.defaultDynamoDBObjectMapper()
        let queryExpression = AWSDynamoDBQueryExpression()
        

        queryExpression.indexName = "Status-Geohash-Index"
        queryExpression.keyConditionExpression = "#CloudPinStatus = :CloudPinStatus AND #geohash < :geohash"
        queryExpression.filterExpression = "#timestamp > :timestamp"
        queryExpression.expressionAttributeNames = [
            "#CloudPinStatus": "CloudPinStatus",
            "#geohash": "geohash",
            "#timestamp": "timestamp",
        ]
        queryExpression.expressionAttributeValues = [
            ":CloudPinStatus": "demo-CloudPinStatus-3",
            ":geohash": "demo-geohash-500000",
            ":timestamp": 1111500000,
        ]
        

        objectMapper.query(CloudPin.self, expression: queryExpression, completionHandler: {(response: AWSDynamoDBPaginatedOutput?, error: NSError?) -> Void in
            dispatch_async(dispatch_get_main_queue(), {
                completionHandler(response: response, error: error)
            })
        })
    }
}
